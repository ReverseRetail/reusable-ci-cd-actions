name: Create Release
on:
  workflow_call:
    inputs:
      commit_mode:
        type: boolean
        required: false
        default: false
      create_release_pr:
        type: string
        required: false
        default: ''

    secrets:
      SLACK_WEBHOOK_URL:
        required: false

jobs:
  build:
    name: "Create release"
    runs-on: ubuntu-latest
    env:
      # Sample: Merge pull request #2602 from MyNamespace/release/1.1.0
      A_RELEASE_MERGE: ${{ github.event.head_commit && contains(github.event.head_commit.message, '/release/') && contains(github.event.head_commit.message, 'Merge pull request') }}
      PUBLISH_RELEASE: ${{ github.event_name == 'push' }}
    if: inputs.create_release_pr != '' || github.event.head_commit

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # ******* calculate versions
      - name: Detect current version
        run: |
          if [[ "$(git tag | wc -l | sed 's/^ *//g')" = '0' ]]
          then
            last_tag='0.0.0'
          else
            last_tag=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=0 --max-count=1`)
          fi
          echo "CURRENT_VERSION=$last_tag" >> $GITHUB_ENV

      - name: Calculate new version from release candidate (when manually creating a release)
        env:
          ENTERED_VERSION: ${{ inputs.create_release_pr }}
        run: echo "NEW_VERSION=$ENTERED_VERSION" >> $GITHUB_ENV
        if: ${{ inputs.create_release_pr != '' }}

      # Sample: Merge pull request #36 from owen2345/release/0.2.0\n\nRelease 0.2.0
      - name: Calculate new version from release candidate (when merged a manually created release)
        env:
          MERGE_MSG: ${{github.event.head_commit.message}}
        run: |
          IFS=$'\n' read -a array <<< "$MERGE_MSG" &&
          result=${array[0]} &&
          IFS="/" read -r -a array <<< "$result" &&
          echo "NEW_VERSION=${array[-1]}" >> $GITHUB_ENV
        if: ${{ env.A_RELEASE_MERGE == 'true' && !env.NEW_VERSION }}

      - name: Calculate new version using current version (when pushed changes to master or merged hotfixes)
        env:
          CURRENT_VERSION: ${{ env.CURRENT_VERSION }}
        run: |
          IFS='.' read -r -a array <<< "$CURRENT_VERSION" &&
          result="${array[0]:-0}.${array[1]:-0}.$(expr "${array[2]:-0}" + 1)"  &&
          echo "NEW_VERSION=$result" >> $GITHUB_ENV
        if: ${{ !env.NEW_VERSION }}
      # ******* end calculate versions


      # ***** generating changelogs
      - name: Download release builder config (Fix missing config file)
        run: |
          sudo apt-get install curl -y
          curl https://raw.githubusercontent.com/owen2345/reusable-ci-cd-actions/main/.github/workflows/release_builder.json --output .github/workflows/release_builder.json

      - name: Create temp git tag
        run: |
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git tag -a $NEW_VERSION.draft -m "Release $NEW_VERSION (draft)"
          git push --tags

      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3.1.1
        with:
          configuration: ".github/workflows/release_builder.json"
          fromTag: ${{env.CURRENT_VERSION}}
          toTag: ${{env.NEW_VERSION}}.draft
          commitMode: ${{inputs.commit_mode}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove downloaded builder config (fix)
        run: rm -f .github/workflows/release_builder.json

      - name: remove temp git tag
        run: git push --delete origin $NEW_VERSION.draft
        if: always()

      # ****** Create Release PR
      - name: Update changelog file
        run: echo "$(echo -e "# Release $NEW_VERSION($(date +%F))\n$CHANGES\n"; cat CHANGELOG.md)" > CHANGELOG.md
        if: ${{ inputs.create_release_pr != '' }}
        env:
          CHANGES: ${{steps.build_changelog.outputs.changelog}}
      - uses: bhowell2/github-substring-action
        id: changelog_pr_adapted
        with:
          value: ${{steps.build_changelog.outputs.changelog}}
          length_from_start: 65000
      - name: Create Release Pull Request
        uses: gr2m/create-or-update-pull-request-action@v1
        if: ${{ inputs.create_release_pr != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit-message: Release ${{ env.NEW_VERSION }}
          labels: release
          branch: "release/${{ env.NEW_VERSION }}"
          assignees: "${{github.actor}}"
          title: "Release ${{ env.NEW_VERSION }}"
          body: |
            # Release ${{ env.NEW_VERSION }}
            ## ${{ inputs.commit_mode && 'Changes included' || 'Pull requests included' }}
            ${{ steps.changelog_pr_adapted.outputs.substring }}

            ## Manual action
            PRs created by github workflows can not run corresponding actions like tests automatically: https://github.com/peter-evans/create-pull-request/issues/48

      # ***** Publish release
      - name: Set current
        run: echo "CURRENT_DATE=$(date)" >> $GITHUB_ENV
      - name: Publish git tag
        uses: mathieudutour/github-tag-action@v5.6
        if: ${{ env.PUBLISH_RELEASE == 'true' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{env.NEW_VERSION}}
          tag_prefix: ""
      - name: Publish release
        id: release
        uses: ncipollo/release-action@v1
        if: ${{ env.PUBLISH_RELEASE == 'true' }}
        with:
          allowUpdates: true
          name: Release ${{ env.NEW_VERSION }}
          tag: ${{ env.NEW_VERSION }}
          body: |
            ## ${{ inputs.commit_mode && 'Changes included' || 'Pull requests included' }} (${{env.CURRENT_DATE}})
            ${{ steps.build_changelog.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Notification via Slack
        if: ${{ env.PUBLISH_RELEASE == 'true' && secrets.SLACK_WEBHOOK_URL }}
        uses: tokorom/action-slack-incoming-webhook@main
        with:
          text: "*Release ${{ env.NEW_VERSION }}* (By ${{ github.actor }})\n${{ steps.build_changelog.outputs.changelog }} \n ${{steps.release.outputs.html_url}}"
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
